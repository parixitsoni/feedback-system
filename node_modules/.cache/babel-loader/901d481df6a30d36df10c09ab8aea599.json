{"ast":null,"code":"import _objectWithoutProperties from \"/home/parixit/Desktop/GitHub/feedback-system/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"/home/parixit/Desktop/GitHub/feedback-system/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/parixit/Desktop/GitHub/feedback-system/src/component/layout/sideNav.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport chainedFunction from 'chained-function';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent, cloneElement } from 'react';\nimport uncontrollable from 'uncontrollable';\nimport warning from 'warning';\nimport Toggle from './Toggle'; // import Nav from './Nav';\n\nimport NavItem from './NavItem';\nimport NavIcon from './NavIcon';\nimport NavText from './NavText';\nimport styles from './index.styl';\nimport match from './match-component';\n\nclass SideNav extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.isToggle = match(Toggle);\n    this.isNav = match(Nav);\n    this.child = {\n      toggle: null,\n      nav: null\n    };\n\n    this.handleClick = event => {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.toggleExpanded('click');\n    };\n  }\n\n  toggleExpanded(eventType) {\n    const expanded = !this.props.expanded;\n\n    if (this.props.onToggle) {\n      this.props.onToggle(expanded);\n    }\n  }\n\n  renderToggle(child, props) {\n    let ref = c => {\n      this.child.toggle = c;\n    };\n\n    if (typeof child.ref === 'string') {\n      warning(false, 'String refs are not supported on `<SideNav.Toggle>` component. ' + 'To apply a ref to the component use the callback signature:\\n\\n ' + 'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n    } else {\n      ref = chainedFunction(child.ref, ref);\n    }\n\n    return cloneElement(child, _objectSpread({}, props, {\n      ref,\n      onClick: chainedFunction(child.props.onClick, this.handleClick)\n    }));\n  }\n\n  renderNav(child, _ref) {\n    let onSelect = _ref.onSelect,\n        props = _objectWithoutProperties(_ref, [\"onSelect\"]);\n\n    let ref = c => {\n      this.child.nav = c;\n    };\n\n    if (typeof child.ref === 'string') {\n      warning(false, 'String refs are not supported on `<SideNav.Nav>` component. ' + 'To apply a ref to the component use the callback signature:\\n\\n ' + 'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute');\n    } else {\n      ref = chainedFunction(child.ref, ref);\n    }\n\n    return cloneElement(child, _objectSpread({}, props, {\n      ref,\n      onSelect: chainedFunction(child.props.onSelect, onSelect)\n    }));\n  }\n\n  render() {\n    const _this$props = this.props,\n          componentType = _this$props.componentType,\n          Component = _this$props.componentClass,\n          disabled = _this$props.disabled,\n          expanded = _this$props.expanded,\n          onToggle = _this$props.onToggle,\n          onSelect = _this$props.onSelect,\n          className = _this$props.className,\n          children = _this$props.children,\n          props = _objectWithoutProperties(_this$props, [\"componentType\", \"componentClass\", \"disabled\", \"expanded\", \"onToggle\", \"onSelect\", \"className\", \"children\"]);\n\n    return React.createElement(Component, Object.assign({}, props, {\n      className: cx(className, styles.sidenav, {\n        [styles.disabled]: disabled,\n        [styles.expanded]: expanded,\n        [styles.collapsed]: !expanded\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }), React.Children.map(children, child => {\n      if (!React.isValidElement(child)) {\n        return child;\n      }\n\n      if (this.isToggle(child)) {\n        return this.renderToggle(child, {\n          disabled,\n          expanded\n        });\n      }\n\n      if (this.isNav(child)) {\n        return this.renderNav(child, {\n          onSelect,\n          expanded\n        });\n      }\n\n      return child;\n    }));\n  }\n\n} // For component matching\n\n\nSideNav.propTypes = {\n  componentType: PropTypes.any,\n  // A custom element for this component.\n  componentClass: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  // Whether the navigation toggle is disabled.\n  disabled: PropTypes.bool,\n  // Whether the side navigation is expanded or collapsed.\n  expanded: PropTypes.bool,\n  // Callback fired when toggling the side navigation between expanded and collapsed state.\n  onToggle: PropTypes.func,\n  // Callback fired when a navigation item is selected.\n  onSelect: PropTypes.func\n};\nSideNav.defaultProps = {\n  componentClass: 'nav'\n};\nSideNav.defaultProps.componentType = SideNav;\nconst UncontrollableSideNav = uncontrollable(SideNav, {\n  // Define the pairs of prop/handlers you want to be uncontrollable\n  expanded: 'onToggle'\n});\nUncontrollableSideNav.Toggle = Toggle;\nUncontrollableSideNav.Nav = Nav;\nUncontrollableSideNav.NavItem = NavItem;\nUncontrollableSideNav.NavIcon = NavIcon;\nUncontrollableSideNav.NavText = NavText;\nexport default UncontrollableSideNav;","map":{"version":3,"sources":["/home/parixit/Desktop/GitHub/feedback-system/src/component/layout/sideNav.js"],"names":["chainedFunction","cx","PropTypes","React","PureComponent","cloneElement","uncontrollable","warning","Toggle","NavItem","NavIcon","NavText","styles","match","SideNav","isToggle","isNav","Nav","child","toggle","nav","handleClick","event","props","disabled","toggleExpanded","eventType","expanded","onToggle","renderToggle","ref","c","onClick","renderNav","onSelect","render","componentType","Component","componentClass","className","children","sidenav","collapsed","Children","map","isValidElement","propTypes","any","oneOfType","string","func","bool","defaultProps","UncontrollableSideNav"],"mappings":"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","sourcesContent":["import chainedFunction from 'chained-function';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { PureComponent, cloneElement } from 'react';\nimport uncontrollable from 'uncontrollable';\nimport warning from 'warning';\nimport Toggle from './Toggle';\n// import Nav from './Nav';\nimport NavItem from './NavItem';\nimport NavIcon from './NavIcon';\nimport NavText from './NavText';\nimport styles from './index.styl';\nimport match from './match-component';\n\nclass SideNav extends PureComponent {\n    static propTypes = {\n        componentType: PropTypes.any,\n\n        // A custom element for this component.\n        componentClass: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.func\n        ]),\n\n        // Whether the navigation toggle is disabled.\n        disabled: PropTypes.bool,\n\n        // Whether the side navigation is expanded or collapsed.\n        expanded: PropTypes.bool,\n\n        // Callback fired when toggling the side navigation between expanded and collapsed state.\n        onToggle: PropTypes.func,\n\n        // Callback fired when a navigation item is selected.\n        onSelect: PropTypes.func\n    };\n    static defaultProps = {\n        componentClass: 'nav'\n    };\n\n    isToggle = match(Toggle);\n    isNav = match(Nav);\n\n    child = {\n        toggle: null,\n        nav: null\n    };\n\n    handleClick = (event) => {\n        if (this.props.disabled) {\n            return;\n        }\n\n        this.toggleExpanded('click');\n    };\n\n    toggleExpanded(eventType) {\n        const expanded = !this.props.expanded;\n\n        if (this.props.onToggle) {\n            this.props.onToggle(expanded);\n        }\n    }\n    renderToggle(child, props) {\n        let ref = c => {\n            this.child.toggle = c;\n        };\n\n        if (typeof child.ref === 'string') {\n            warning(\n                false,\n                'String refs are not supported on `<SideNav.Toggle>` component. ' +\n                'To apply a ref to the component use the callback signature:\\n\\n ' +\n                'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute'\n            );\n        } else {\n            ref = chainedFunction(child.ref, ref);\n        }\n\n        return cloneElement(child, {\n            ...props,\n            ref,\n            onClick: chainedFunction(\n                child.props.onClick,\n                this.handleClick\n            )\n        });\n    }\n    renderNav(child, { onSelect, ...props }) {\n        let ref = c => {\n            this.child.nav = c;\n        };\n\n        if (typeof child.ref === 'string') {\n            warning(\n                false,\n                'String refs are not supported on `<SideNav.Nav>` component. ' +\n                'To apply a ref to the component use the callback signature:\\n\\n ' +\n                'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute'\n            );\n        } else {\n            ref = chainedFunction(child.ref, ref);\n        }\n\n        return cloneElement(child, {\n            ...props,\n            ref,\n            onSelect: chainedFunction(\n                child.props.onSelect,\n                onSelect\n            )\n        });\n    }\n    render() {\n        const {\n            componentType, // eslint-disable-line\n            componentClass: Component,\n            disabled,\n            expanded,\n            onToggle, // eslint-disable-line\n            onSelect,\n            className,\n            children,\n            ...props\n        } = this.props;\n\n        return (\n            <Component\n                {...props}\n                className={cx(\n                    className,\n                    styles.sidenav,\n                    {\n                        [styles.disabled]: disabled,\n                        [styles.expanded]: expanded,\n                        [styles.collapsed]: !expanded\n                    }\n                )}\n            >\n                {React.Children.map(children, child => {\n                    if (!React.isValidElement(child)) {\n                        return child;\n                    }\n\n                    if (this.isToggle(child)) {\n                        return this.renderToggle(child, {\n                            disabled, expanded\n                        });\n                    }\n\n                    if (this.isNav(child)) {\n                        return this.renderNav(child, {\n                            onSelect, expanded\n                        });\n                    }\n\n                    return child;\n                })}\n            </Component>\n        );\n    }\n}\n\n// For component matching\nSideNav.defaultProps.componentType = SideNav;\n\nconst UncontrollableSideNav = uncontrollable(SideNav, {\n    // Define the pairs of prop/handlers you want to be uncontrollable\n    expanded: 'onToggle'\n});\n\nUncontrollableSideNav.Toggle = Toggle;\nUncontrollableSideNav.Nav = Nav;\nUncontrollableSideNav.NavItem = NavItem;\nUncontrollableSideNav.NavIcon = NavIcon;\nUncontrollableSideNav.NavText = NavText;\n\nexport default UncontrollableSideNav;"]},"metadata":{},"sourceType":"module"}