{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _desc, _value, _class;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _autobindDecorator = require('autobind-decorator');\n\nvar _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);\n\nvar _valueTransformer = require('./value-transformer');\n\nvar valueTransformer = _interopRequireWildcard(_valueTransformer);\n\nvar _defaultClassNames = require('./default-class-names');\n\nvar _defaultClassNames2 = _interopRequireDefault(_defaultClassNames);\n\nvar _label = require('./label');\n\nvar _label2 = _interopRequireDefault(_label);\n\nvar _rangePropType = require('./range-prop-type');\n\nvar _rangePropType2 = _interopRequireDefault(_rangePropType);\n\nvar _valuePropType = require('./value-prop-type');\n\nvar _valuePropType2 = _interopRequireDefault(_valuePropType);\n\nvar _slider = require('./slider');\n\nvar _slider2 = _interopRequireDefault(_slider);\n\nvar _track = require('./track');\n\nvar _track2 = _interopRequireDefault(_track);\n\nvar _utils = require('../utils');\n\nvar _keyCodes = require('./key-codes');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object['ke' + 'ys'](descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n\n  if (desc.initializer === void 0) {\n    Object['define' + 'Property'](target, property, desc);\n    desc = null;\n  }\n\n  return desc;\n}\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\n\n\nvar InputRange = (_class = function (_React$Component) {\n  _inherits(InputRange, _React$Component);\n\n  _createClass(InputRange, null, [{\n    key: 'propTypes',\n\n    /**\n     * @ignore\n     * @override\n     * @return {Object}\n     */\n    get: function get() {\n      return {\n        allowSameValues: _propTypes2.default.bool,\n        ariaLabelledby: _propTypes2.default.string,\n        ariaControls: _propTypes2.default.string,\n        classNames: _propTypes2.default.objectOf(_propTypes2.default.string),\n        disabled: _propTypes2.default.bool,\n        draggableTrack: _propTypes2.default.bool,\n        formatLabel: _propTypes2.default.func,\n        maxValue: _rangePropType2.default,\n        minValue: _rangePropType2.default,\n        name: _propTypes2.default.string,\n        onChangeStart: _propTypes2.default.func,\n        onChange: _propTypes2.default.func.isRequired,\n        onChangeComplete: _propTypes2.default.func,\n        step: _propTypes2.default.number,\n        value: _valuePropType2.default\n      };\n    }\n    /**\n     * @ignore\n     * @override\n     * @return {Object}\n     */\n\n  }, {\n    key: 'defaultProps',\n    get: function get() {\n      return {\n        allowSameValues: false,\n        classNames: _defaultClassNames2.default,\n        disabled: false,\n        maxValue: 10,\n        minValue: 0,\n        step: 1\n      };\n    }\n    /**\n     * @param {Object} props\n     * @param {boolean} [props.allowSameValues]\n     * @param {string} [props.ariaLabelledby]\n     * @param {string} [props.ariaControls]\n     * @param {InputRangeClassNames} [props.classNames]\n     * @param {boolean} [props.disabled = false]\n     * @param {Function} [props.formatLabel]\n     * @param {number|Range} [props.maxValue = 10]\n     * @param {number|Range} [props.minValue = 0]\n     * @param {string} [props.name]\n     * @param {string} props.onChange\n     * @param {Function} [props.onChangeComplete]\n     * @param {Function} [props.onChangeStart]\n     * @param {number} [props.step = 1]\n     * @param {number|Range} props.value\n     */\n\n  }]);\n\n  function InputRange(props) {\n    _classCallCheck(this, InputRange);\n    /**\n     * @private\n     * @type {?number}\n     */\n\n\n    var _this = _possibleConstructorReturn(this, (InputRange.__proto__ || Object.getPrototypeOf(InputRange)).call(this, props));\n\n    _this.startValue = null;\n    /**\n     * @private\n     * @type {?Component}\n     */\n\n    _this.node = null;\n    /**\n     * @private\n     * @type {?Component}\n     */\n\n    _this.trackNode = null;\n    /**\n     * @private\n     * @type {bool}\n     */\n\n    _this.isSliderDragging = false;\n    /**\n     * @private\n     * @type {?string}\n     */\n\n    _this.lastKeyMoved = null;\n    return _this;\n  }\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n\n\n  _createClass(InputRange, [{\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.removeDocumentMouseUpListener();\n      this.removeDocumentTouchEndListener();\n    }\n    /**\n     * Return the CSS class name of the component\n     * @private\n     * @return {string}\n     */\n\n  }, {\n    key: 'getComponentClassName',\n    value: function getComponentClassName() {\n      if (!this.props.disabled) {\n        return this.props.classNames.inputRange;\n      }\n\n      return this.props.classNames.disabledInputRange;\n    }\n    /**\n     * Return the bounding rect of the track\n     * @private\n     * @return {ClientRect}\n     */\n\n  }, {\n    key: 'getTrackClientRect',\n    value: function getTrackClientRect() {\n      return this.trackNode.getClientRect();\n    }\n    /**\n     * Return the slider key closest to a point\n     * @private\n     * @param {Point} position\n     * @return {string}\n     */\n\n  }, {\n    key: 'getKeyByPosition',\n    value: function getKeyByPosition(position) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n      if (this.isMultiValue()) {\n        var distanceToMin = (0, _utils.distanceTo)(position, positions.min);\n        var distanceToMax = (0, _utils.distanceTo)(position, positions.max);\n\n        if (distanceToMin < distanceToMax) {\n          return 'min';\n        }\n      }\n\n      return 'max';\n    }\n    /**\n     * Return all the slider keys\n     * @private\n     * @return {string[]}\n     */\n\n  }, {\n    key: 'getKeys',\n    value: function getKeys() {\n      if (this.isMultiValue()) {\n        return ['min', 'max'];\n      }\n\n      return ['max'];\n    }\n    /**\n     * Return true if the difference between the new and the current value is\n     * greater or equal to the step amount of the component\n     * @private\n     * @param {Range} values\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'hasStepDifference',\n    value: function hasStepDifference(values) {\n      var currentValues = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      return (0, _utils.length)(values.min, currentValues.min) >= this.props.step || (0, _utils.length)(values.max, currentValues.max) >= this.props.step;\n    }\n    /**\n     * Return true if the component accepts a min and max value\n     * @private\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'isMultiValue',\n    value: function isMultiValue() {\n      return (0, _utils.isObject)(this.props.value);\n    }\n    /**\n     * Return true if the range is within the max and min value of the component\n     * @private\n     * @param {Range} values\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'isWithinRange',\n    value: function isWithinRange(values) {\n      if (this.isMultiValue()) {\n        return values.min >= this.props.minValue && values.max <= this.props.maxValue && this.props.allowSameValues ? values.min <= values.max : values.min < values.max;\n      }\n\n      return values.max >= this.props.minValue && values.max <= this.props.maxValue;\n    }\n    /**\n     * Return true if the new value should trigger a render\n     * @private\n     * @param {Range} values\n     * @return {boolean}\n     */\n\n  }, {\n    key: 'shouldUpdate',\n    value: function shouldUpdate(values) {\n      return this.isWithinRange(values) && this.hasStepDifference(values);\n    }\n    /**\n     * Update the position of a slider\n     * @private\n     * @param {string} key\n     * @param {Point} position\n     * @return {void}\n     */\n\n  }, {\n    key: 'updatePosition',\n    value: function updatePosition(key, position) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n      positions[key] = position;\n      this.lastKeyMoved = key;\n      this.updatePositions(positions);\n    }\n    /**\n     * Update the positions of multiple sliders\n     * @private\n     * @param {Object} positions\n     * @param {Point} positions.min\n     * @param {Point} positions.max\n     * @return {void}\n     */\n\n  }, {\n    key: 'updatePositions',\n    value: function updatePositions(positions) {\n      var values = {\n        min: valueTransformer.getValueFromPosition(positions.min, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n        max: valueTransformer.getValueFromPosition(positions.max, this.props.minValue, this.props.maxValue, this.getTrackClientRect())\n      };\n      var transformedValues = {\n        min: valueTransformer.getStepValueFromValue(values.min, this.props.step),\n        max: valueTransformer.getStepValueFromValue(values.max, this.props.step)\n      };\n      this.updateValues(transformedValues);\n    }\n    /**\n     * Update the value of a slider\n     * @private\n     * @param {string} key\n     * @param {number} value\n     * @return {void}\n     */\n\n  }, {\n    key: 'updateValue',\n    value: function updateValue(key, value) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      values[key] = value;\n      this.updateValues(values);\n    }\n    /**\n     * Update the values of multiple sliders\n     * @private\n     * @param {Range|number} values\n     * @return {void}\n     */\n\n  }, {\n    key: 'updateValues',\n    value: function updateValues(values) {\n      if (!this.shouldUpdate(values)) {\n        return;\n      }\n\n      this.props.onChange(this.isMultiValue() ? values : values.max);\n    }\n    /**\n     * Increment the value of a slider by key name\n     * @private\n     * @param {string} key\n     * @return {void}\n     */\n\n  }, {\n    key: 'incrementValue',\n    value: function incrementValue(key) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var value = values[key] + this.props.step;\n      this.updateValue(key, value);\n    }\n    /**\n     * Decrement the value of a slider by key name\n     * @private\n     * @param {string} key\n     * @return {void}\n     */\n\n  }, {\n    key: 'decrementValue',\n    value: function decrementValue(key) {\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var value = values[key] - this.props.step;\n      this.updateValue(key, value);\n    }\n    /**\n     * Listen to mouseup event\n     * @private\n     * @return {void}\n     */\n\n  }, {\n    key: 'addDocumentMouseUpListener',\n    value: function addDocumentMouseUpListener() {\n      this.removeDocumentMouseUpListener();\n      this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n    }\n    /**\n     * Listen to touchend event\n     * @private\n     * @return {void}\n     */\n\n  }, {\n    key: 'addDocumentTouchEndListener',\n    value: function addDocumentTouchEndListener() {\n      this.removeDocumentTouchEndListener();\n      this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n    }\n    /**\n     * Stop listening to mouseup event\n     * @private\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeDocumentMouseUpListener',\n    value: function removeDocumentMouseUpListener() {\n      this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n    }\n    /**\n     * Stop listening to touchend event\n     * @private\n     * @return {void}\n     */\n\n  }, {\n    key: 'removeDocumentTouchEndListener',\n    value: function removeDocumentTouchEndListener() {\n      this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n    }\n    /**\n     * Handle any \"mousemove\" event received by the slider\n     * @private\n     * @param {SyntheticEvent} event\n     * @param {string} key\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleSliderDrag',\n    value: function handleSliderDrag(event, key) {\n      var _this2 = this;\n\n      if (this.props.disabled) {\n        return;\n      }\n\n      var position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n      this.isSliderDragging = true;\n      requestAnimationFrame(function () {\n        return _this2.updatePosition(key, position);\n      });\n    }\n    /**\n     * Handle any \"mousemove\" event received by the track\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleTrackDrag',\n    value: function handleTrackDrag(event, prevEvent) {\n      if (this.props.disabled || !this.props.draggableTrack || this.isSliderDragging) {\n        return;\n      }\n\n      var _props = this.props,\n          maxValue = _props.maxValue,\n          minValue = _props.minValue,\n          _props$value = _props.value,\n          max = _props$value.max,\n          min = _props$value.min;\n      var position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n      var value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n      var stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n      var prevPosition = valueTransformer.getPositionFromEvent(prevEvent, this.getTrackClientRect());\n      var prevValue = valueTransformer.getValueFromPosition(prevPosition, minValue, maxValue, this.getTrackClientRect());\n      var prevStepValue = valueTransformer.getStepValueFromValue(prevValue, this.props.step);\n      var offset = prevStepValue - stepValue;\n      var transformedValues = {\n        min: min - offset,\n        max: max - offset\n      };\n      this.updateValues(transformedValues);\n    }\n    /**\n     * Handle any \"keydown\" event received by the slider\n     * @private\n     * @param {SyntheticEvent} event\n     * @param {string} key\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleSliderKeyDown',\n    value: function handleSliderKeyDown(event, key) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      switch (event.keyCode) {\n        case _keyCodes.LEFT_ARROW:\n        case _keyCodes.DOWN_ARROW:\n          event.preventDefault();\n          this.decrementValue(key);\n          break;\n\n        case _keyCodes.RIGHT_ARROW:\n        case _keyCodes.UP_ARROW:\n          event.preventDefault();\n          this.incrementValue(key);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * Handle any \"mousedown\" event received by the track\n     * @private\n     * @param {SyntheticEvent} event\n     * @param {Point} position\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleTrackMouseDown',\n    value: function handleTrackMouseDown(event, position) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      var _props2 = this.props,\n          maxValue = _props2.maxValue,\n          minValue = _props2.minValue,\n          _props2$value = _props2.value,\n          max = _props2$value.max,\n          min = _props2$value.min;\n      event.preventDefault();\n      var value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n      var stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n      if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n        this.updatePosition(this.getKeyByPosition(position), position);\n      }\n    }\n    /**\n     * Handle the start of any mouse/touch event\n     * @private\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleInteractionStart',\n    value: function handleInteractionStart() {\n      if (this.props.onChangeStart) {\n        this.props.onChangeStart(this.props.value);\n      }\n\n      if (this.props.onChangeComplete && !(0, _utils.isDefined)(this.startValue)) {\n        this.startValue = this.props.value;\n      }\n    }\n    /**\n     * Handle the end of any mouse/touch event\n     * @private\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleInteractionEnd',\n    value: function handleInteractionEnd() {\n      if (this.isSliderDragging) {\n        this.isSliderDragging = false;\n      }\n\n      if (!this.props.onChangeComplete || !(0, _utils.isDefined)(this.startValue)) {\n        return;\n      }\n\n      if (this.startValue !== this.props.value) {\n        this.props.onChangeComplete(this.props.value);\n      }\n\n      this.startValue = null;\n    }\n    /**\n     * Handle any \"keydown\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(event) {\n      this.handleInteractionStart(event);\n    }\n    /**\n     * Handle any \"keyup\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleKeyUp',\n    value: function handleKeyUp(event) {\n      this.handleInteractionEnd(event);\n    }\n    /**\n     * Handle any \"mousedown\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleMouseDown',\n    value: function handleMouseDown(event) {\n      this.handleInteractionStart(event);\n      this.addDocumentMouseUpListener();\n    }\n    /**\n     * Handle any \"mouseup\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     */\n\n  }, {\n    key: 'handleMouseUp',\n    value: function handleMouseUp(event) {\n      this.handleInteractionEnd(event);\n      this.removeDocumentMouseUpListener();\n    }\n    /**\n     * Handle any \"touchstart\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     * @return {void}\n     */\n\n  }, {\n    key: 'handleTouchStart',\n    value: function handleTouchStart(event) {\n      this.handleInteractionStart(event);\n      this.addDocumentTouchEndListener();\n    }\n    /**\n     * Handle any \"touchend\" event received by the component\n     * @private\n     * @param {SyntheticEvent} event\n     */\n\n  }, {\n    key: 'handleTouchEnd',\n    value: function handleTouchEnd(event) {\n      this.handleInteractionEnd(event);\n      this.removeDocumentTouchEndListener();\n    }\n    /**\n     * Return JSX of sliders\n     * @private\n     * @return {JSX.Element}\n     */\n\n  }, {\n    key: 'renderSliders',\n    value: function renderSliders() {\n      var _this3 = this;\n\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n      var keys = this.props.allowSameValues && this.lastKeyMoved === 'min' ? this.getKeys().reverse() : this.getKeys();\n      return keys.map(function (key) {\n        var value = values[key];\n        var percentage = percentages[key];\n        var _props3 = _this3.props,\n            maxValue = _props3.maxValue,\n            minValue = _props3.minValue;\n\n        if (key === 'min') {\n          maxValue = values.max;\n        } else {\n          minValue = values.min;\n        }\n\n        var slider = _react2.default.createElement(_slider2.default, {\n          ariaLabelledby: _this3.props.ariaLabelledby,\n          ariaControls: _this3.props.ariaControls,\n          classNames: _this3.props.classNames,\n          formatLabel: _this3.props.formatLabel,\n          key: key,\n          maxValue: maxValue,\n          minValue: minValue,\n          onSliderDrag: _this3.handleSliderDrag,\n          onSliderKeyDown: _this3.handleSliderKeyDown,\n          percentage: percentage,\n          type: key,\n          value: value\n        });\n\n        return slider;\n      });\n    }\n    /**\n     * Return JSX of hidden inputs\n     * @private\n     * @return {JSX.Element}\n     */\n\n  }, {\n    key: 'renderHiddenInputs',\n    value: function renderHiddenInputs() {\n      var _this4 = this;\n\n      if (!this.props.name) {\n        return [];\n      }\n\n      var isMultiValue = this.isMultiValue();\n      var values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n      return this.getKeys().map(function (key) {\n        var value = values[key];\n        var name = isMultiValue ? '' + _this4.props.name + (0, _utils.captialize)(key) : _this4.props.name;\n        return _react2.default.createElement('input', {\n          key: key,\n          type: 'hidden',\n          name: name,\n          value: value\n        });\n      });\n    }\n    /**\n     * @ignore\n     * @override\n     * @return {JSX.Element}\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this5 = this;\n\n      var componentClassName = this.getComponentClassName();\n      var values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n      var percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n      return _react2.default.createElement('div', {\n        'aria-disabled': this.props.disabled,\n        ref: function ref(node) {\n          _this5.node = node;\n        },\n        className: componentClassName,\n        onKeyDown: this.handleKeyDown,\n        onKeyUp: this.handleKeyUp,\n        onMouseDown: this.handleMouseDown,\n        onTouchStart: this.handleTouchStart\n      }, _react2.default.createElement(_label2.default, {\n        classNames: this.props.classNames,\n        formatLabel: this.props.formatLabel,\n        type: 'min'\n      }, this.props.minValue), _react2.default.createElement(_track2.default, {\n        classNames: this.props.classNames,\n        draggableTrack: this.props.draggableTrack,\n        ref: function ref(trackNode) {\n          _this5.trackNode = trackNode;\n        },\n        percentages: percentages,\n        onTrackDrag: this.handleTrackDrag,\n        onTrackMouseDown: this.handleTrackMouseDown\n      }, this.renderSliders()), _react2.default.createElement(_label2.default, {\n        classNames: this.props.classNames,\n        formatLabel: this.props.formatLabel,\n        type: 'max'\n      }, this.props.maxValue), this.renderHiddenInputs());\n    }\n  }]);\n\n  return InputRange;\n}(_react2.default.Component), (_applyDecoratedDescriptor(_class.prototype, 'handleSliderDrag', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleSliderDrag'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleTrackDrag', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTrackDrag'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleSliderKeyDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleSliderKeyDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleTrackMouseDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTrackMouseDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleInteractionStart', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleInteractionStart'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleInteractionEnd', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleInteractionEnd'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleKeyDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleKeyDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleKeyUp', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleKeyUp'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleMouseDown', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleMouseDown'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleMouseUp', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleMouseUp'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleTouchStart', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTouchStart'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'handleTouchEnd', [_autobindDecorator2.default], Object.getOwnPropertyDescriptor(_class.prototype, 'handleTouchEnd'), _class.prototype)), _class);\nexports.default = InputRange;\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../../src/js/input-range/input-range.jsx"],"names":["valueTransformer","InputRange","Component","allowSameValues","ariaLabelledby","ariaControls","classNames","disabled","draggableTrack","formatLabel","maxValue","minValue","name","onChangeStart","onChange","onChangeComplete","step","value","position","values","positions","distanceToMin","distanceToMax","currentValues","key","min","max","transformedValues","event","requestAnimationFrame","prevEvent","stepValue","prevPosition","prevValue","prevStepValue","offset","percentages","keys","percentage","slider","isMultiValue","componentClassName"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport autobind from 'autobind-decorator';\nimport * as valueTransformer from './value-transformer';\nimport DEFAULT_CLASS_NAMES from './default-class-names';\nimport Label from './label';\nimport rangePropType from './range-prop-type';\nimport valuePropType from './value-prop-type';\nimport Slider from './slider';\nimport Track from './track';\nimport { captialize, distanceTo, isDefined, isObject, length } from '../utils';\nimport { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from './key-codes';\n\n/**\n * A React component that allows users to input numeric values within a range\n * by dragging its sliders.\n */\nexport default class InputRange extends React.Component {\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get propTypes() {\n    return {\n      allowSameValues: PropTypes.bool,\n      ariaLabelledby: PropTypes.string,\n      ariaControls: PropTypes.string,\n      classNames: PropTypes.objectOf(PropTypes.string),\n      disabled: PropTypes.bool,\n      draggableTrack: PropTypes.bool,\n      formatLabel: PropTypes.func,\n      maxValue: rangePropType,\n      minValue: rangePropType,\n      name: PropTypes.string,\n      onChangeStart: PropTypes.func,\n      onChange: PropTypes.func.isRequired,\n      onChangeComplete: PropTypes.func,\n      step: PropTypes.number,\n      value: valuePropType,\n    };\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {Object}\n   */\n  static get defaultProps() {\n    return {\n      allowSameValues: false,\n      classNames: DEFAULT_CLASS_NAMES,\n      disabled: false,\n      maxValue: 10,\n      minValue: 0,\n      step: 1,\n    };\n  }\n\n  /**\n   * @param {Object} props\n   * @param {boolean} [props.allowSameValues]\n   * @param {string} [props.ariaLabelledby]\n   * @param {string} [props.ariaControls]\n   * @param {InputRangeClassNames} [props.classNames]\n   * @param {boolean} [props.disabled = false]\n   * @param {Function} [props.formatLabel]\n   * @param {number|Range} [props.maxValue = 10]\n   * @param {number|Range} [props.minValue = 0]\n   * @param {string} [props.name]\n   * @param {string} props.onChange\n   * @param {Function} [props.onChangeComplete]\n   * @param {Function} [props.onChangeStart]\n   * @param {number} [props.step = 1]\n   * @param {number|Range} props.value\n   */\n  constructor(props) {\n    super(props);\n\n    /**\n     * @private\n     * @type {?number}\n     */\n    this.startValue = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.node = null;\n\n    /**\n     * @private\n     * @type {?Component}\n     */\n    this.trackNode = null;\n\n    /**\n     * @private\n     * @type {bool}\n     */\n    this.isSliderDragging = false;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.lastKeyMoved = null;\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {void}\n   */\n  componentWillUnmount() {\n    this.removeDocumentMouseUpListener();\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return the CSS class name of the component\n   * @private\n   * @return {string}\n   */\n  getComponentClassName() {\n    if (!this.props.disabled) {\n      return this.props.classNames.inputRange;\n    }\n\n    return this.props.classNames.disabledInputRange;\n  }\n\n  /**\n   * Return the bounding rect of the track\n   * @private\n   * @return {ClientRect}\n   */\n  getTrackClientRect() {\n    return this.trackNode.getClientRect();\n  }\n\n  /**\n   * Return the slider key closest to a point\n   * @private\n   * @param {Point} position\n   * @return {string}\n   */\n  getKeyByPosition(position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    if (this.isMultiValue()) {\n      const distanceToMin = distanceTo(position, positions.min);\n      const distanceToMax = distanceTo(position, positions.max);\n\n      if (distanceToMin < distanceToMax) {\n        return 'min';\n      }\n    }\n\n    return 'max';\n  }\n\n  /**\n   * Return all the slider keys\n   * @private\n   * @return {string[]}\n   */\n  getKeys() {\n    if (this.isMultiValue()) {\n      return ['min', 'max'];\n    }\n\n    return ['max'];\n  }\n\n  /**\n   * Return true if the difference between the new and the current value is\n   * greater or equal to the step amount of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  hasStepDifference(values) {\n    const currentValues = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    return length(values.min, currentValues.min) >= this.props.step ||\n           length(values.max, currentValues.max) >= this.props.step;\n  }\n\n  /**\n   * Return true if the component accepts a min and max value\n   * @private\n   * @return {boolean}\n   */\n  isMultiValue() {\n    return isObject(this.props.value);\n  }\n\n  /**\n   * Return true if the range is within the max and min value of the component\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  isWithinRange(values) {\n    if (this.isMultiValue()) {\n      return values.min >= this.props.minValue &&\n             values.max <= this.props.maxValue &&\n             this.props.allowSameValues\n              ? values.min <= values.max\n              : values.min < values.max;\n    }\n\n    return values.max >= this.props.minValue && values.max <= this.props.maxValue;\n  }\n\n  /**\n   * Return true if the new value should trigger a render\n   * @private\n   * @param {Range} values\n   * @return {boolean}\n   */\n  shouldUpdate(values) {\n    return this.isWithinRange(values) && this.hasStepDifference(values);\n  }\n\n  /**\n   * Update the position of a slider\n   * @private\n   * @param {string} key\n   * @param {Point} position\n   * @return {void}\n   */\n  updatePosition(key, position) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const positions = valueTransformer.getPositionsFromValues(values, this.props.minValue, this.props.maxValue, this.getTrackClientRect());\n\n    positions[key] = position;\n    this.lastKeyMoved = key;\n\n    this.updatePositions(positions);\n  }\n\n  /**\n   * Update the positions of multiple sliders\n   * @private\n   * @param {Object} positions\n   * @param {Point} positions.min\n   * @param {Point} positions.max\n   * @return {void}\n   */\n  updatePositions(positions) {\n    const values = {\n      min: valueTransformer.getValueFromPosition(positions.min, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n      max: valueTransformer.getValueFromPosition(positions.max, this.props.minValue, this.props.maxValue, this.getTrackClientRect()),\n    };\n\n    const transformedValues = {\n      min: valueTransformer.getStepValueFromValue(values.min, this.props.step),\n      max: valueTransformer.getStepValueFromValue(values.max, this.props.step),\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Update the value of a slider\n   * @private\n   * @param {string} key\n   * @param {number} value\n   * @return {void}\n   */\n  updateValue(key, value) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n\n    values[key] = value;\n\n    this.updateValues(values);\n  }\n\n  /**\n   * Update the values of multiple sliders\n   * @private\n   * @param {Range|number} values\n   * @return {void}\n   */\n  updateValues(values) {\n    if (!this.shouldUpdate(values)) {\n      return;\n    }\n\n    this.props.onChange(this.isMultiValue() ? values : values.max);\n  }\n\n  /**\n   * Increment the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  incrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] + this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Decrement the value of a slider by key name\n   * @private\n   * @param {string} key\n   * @return {void}\n   */\n  decrementValue(key) {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const value = values[key] - this.props.step;\n\n    this.updateValue(key, value);\n  }\n\n  /**\n   * Listen to mouseup event\n   * @private\n   * @return {void}\n   */\n  addDocumentMouseUpListener() {\n    this.removeDocumentMouseUpListener();\n    this.node.ownerDocument.addEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Listen to touchend event\n   * @private\n   * @return {void}\n   */\n  addDocumentTouchEndListener() {\n    this.removeDocumentTouchEndListener();\n    this.node.ownerDocument.addEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Stop listening to mouseup event\n   * @private\n   * @return {void}\n   */\n  removeDocumentMouseUpListener() {\n    this.node.ownerDocument.removeEventListener('mouseup', this.handleMouseUp);\n  }\n\n  /**\n   * Stop listening to touchend event\n   * @private\n   * @return {void}\n   */\n  removeDocumentTouchEndListener() {\n    this.node.ownerDocument.removeEventListener('touchend', this.handleTouchEnd);\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderDrag(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    this.isSliderDragging = true;\n    requestAnimationFrame(() => this.updatePosition(key, position));\n  }\n\n  /**\n   * Handle any \"mousemove\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTrackDrag(event, prevEvent) {\n    if (this.props.disabled || !this.props.draggableTrack || this.isSliderDragging) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    const position = valueTransformer.getPositionFromEvent(event, this.getTrackClientRect());\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    const prevPosition = valueTransformer.getPositionFromEvent(prevEvent, this.getTrackClientRect());\n    const prevValue = valueTransformer.getValueFromPosition(prevPosition, minValue, maxValue, this.getTrackClientRect());\n    const prevStepValue = valueTransformer.getStepValueFromValue(prevValue, this.props.step);\n\n    const offset = prevStepValue - stepValue;\n\n    const transformedValues = {\n      min: min - offset,\n      max: max - offset,\n    };\n\n    this.updateValues(transformedValues);\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the slider\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {string} key\n   * @return {void}\n   */\n  @autobind\n  handleSliderKeyDown(event, key) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n    case LEFT_ARROW:\n    case DOWN_ARROW:\n      event.preventDefault();\n      this.decrementValue(key);\n      break;\n\n    case RIGHT_ARROW:\n    case UP_ARROW:\n      event.preventDefault();\n      this.incrementValue(key);\n      break;\n\n    default:\n      break;\n    }\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the track\n   * @private\n   * @param {SyntheticEvent} event\n   * @param {Point} position\n   * @return {void}\n   */\n  @autobind\n  handleTrackMouseDown(event, position) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    const {\n      maxValue,\n      minValue,\n      value: { max, min },\n    } = this.props;\n\n    event.preventDefault();\n\n    const value = valueTransformer.getValueFromPosition(position, minValue, maxValue, this.getTrackClientRect());\n    const stepValue = valueTransformer.getStepValueFromValue(value, this.props.step);\n\n    if (!this.props.draggableTrack || stepValue > max || stepValue < min) {\n      this.updatePosition(this.getKeyByPosition(position), position);\n    }\n  }\n\n  /**\n   * Handle the start of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionStart() {\n    if (this.props.onChangeStart) {\n      this.props.onChangeStart(this.props.value);\n    }\n\n    if (this.props.onChangeComplete && !isDefined(this.startValue)) {\n      this.startValue = this.props.value;\n    }\n  }\n\n  /**\n   * Handle the end of any mouse/touch event\n   * @private\n   * @return {void}\n   */\n  @autobind\n  handleInteractionEnd() {\n    if (this.isSliderDragging) {\n      this.isSliderDragging = false;\n    }\n\n    if (!this.props.onChangeComplete || !isDefined(this.startValue)) {\n      return;\n    }\n\n    if (this.startValue !== this.props.value) {\n      this.props.onChangeComplete(this.props.value);\n    }\n\n    this.startValue = null;\n  }\n\n  /**\n   * Handle any \"keydown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyDown(event) {\n    this.handleInteractionStart(event);\n  }\n\n  /**\n   * Handle any \"keyup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleKeyUp(event) {\n    this.handleInteractionEnd(event);\n  }\n\n  /**\n   * Handle any \"mousedown\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleMouseDown(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"mouseup\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleMouseUp(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentMouseUpListener();\n  }\n\n  /**\n   * Handle any \"touchstart\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   * @return {void}\n   */\n  @autobind\n  handleTouchStart(event) {\n    this.handleInteractionStart(event);\n    this.addDocumentTouchEndListener();\n  }\n\n  /**\n   * Handle any \"touchend\" event received by the component\n   * @private\n   * @param {SyntheticEvent} event\n   */\n  @autobind\n  handleTouchEnd(event) {\n    this.handleInteractionEnd(event);\n    this.removeDocumentTouchEndListener();\n  }\n\n  /**\n   * Return JSX of sliders\n   * @private\n   * @return {JSX.Element}\n   */\n  renderSliders() {\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n    const keys = this.props.allowSameValues &&\n      this.lastKeyMoved === 'min'\n      ? this.getKeys().reverse()\n      : this.getKeys();\n\n    return keys.map((key) => {\n      const value = values[key];\n      const percentage = percentages[key];\n\n      let { maxValue, minValue } = this.props;\n\n      if (key === 'min') {\n        maxValue = values.max;\n      } else {\n        minValue = values.min;\n      }\n\n      const slider = (\n        <Slider\n          ariaLabelledby={this.props.ariaLabelledby}\n          ariaControls={this.props.ariaControls}\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          key={key}\n          maxValue={maxValue}\n          minValue={minValue}\n          onSliderDrag={this.handleSliderDrag}\n          onSliderKeyDown={this.handleSliderKeyDown}\n          percentage={percentage}\n          type={key}\n          value={value} />\n      );\n\n      return slider;\n    });\n  }\n\n  /**\n   * Return JSX of hidden inputs\n   * @private\n   * @return {JSX.Element}\n   */\n  renderHiddenInputs() {\n    if (!this.props.name) {\n      return [];\n    }\n\n    const isMultiValue = this.isMultiValue();\n    const values = valueTransformer.getValueFromProps(this.props, isMultiValue);\n\n    return this.getKeys().map((key) => {\n      const value = values[key];\n      const name = isMultiValue ? `${this.props.name}${captialize(key)}` : this.props.name;\n\n      return (\n        <input key={key} type=\"hidden\" name={name} value={value} />\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   * @override\n   * @return {JSX.Element}\n   */\n  render() {\n    const componentClassName = this.getComponentClassName();\n    const values = valueTransformer.getValueFromProps(this.props, this.isMultiValue());\n    const percentages = valueTransformer.getPercentagesFromValues(values, this.props.minValue, this.props.maxValue);\n\n    return (\n      <div\n        aria-disabled={this.props.disabled}\n        ref={(node) => { this.node = node; }}\n        className={componentClassName}\n        onKeyDown={this.handleKeyDown}\n        onKeyUp={this.handleKeyUp}\n        onMouseDown={this.handleMouseDown}\n        onTouchStart={this.handleTouchStart}>\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"min\">\n          {this.props.minValue}\n        </Label>\n\n        <Track\n          classNames={this.props.classNames}\n          draggableTrack={this.props.draggableTrack}\n          ref={(trackNode) => { this.trackNode = trackNode; }}\n          percentages={percentages}\n          onTrackDrag={this.handleTrackDrag}\n          onTrackMouseDown={this.handleTrackMouseDown}>\n\n          {this.renderSliders()}\n        </Track>\n\n        <Label\n          classNames={this.props.classNames}\n          formatLabel={this.props.formatLabel}\n          type=\"max\">\n          {this.props.maxValue}\n        </Label>\n\n        {this.renderHiddenInputs()}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}