{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = valuePropType;\n\nvar _utils = require('../utils');\n/**\n * @ignore\n * @param {Object} props\n * @return {?Error} Return Error if validation fails\n */\n\n\nfunction valuePropType(props, propName) {\n  var maxValue = props.maxValue,\n      minValue = props.minValue;\n  var value = props[propName];\n\n  if (!(0, _utils.isNumber)(value) && (!(0, _utils.isObject)(value) || !(0, _utils.isNumber)(value.min) || !(0, _utils.isNumber)(value.max))) {\n    return new Error('\"' + propName + '\" must be a number or a range object');\n  }\n\n  if ((0, _utils.isNumber)(value) && (value < minValue || value > maxValue)) {\n    return new Error('\"' + propName + '\" must be in between \"minValue\" and \"maxValue\"');\n  }\n\n  if ((0, _utils.isObject)(value) && (value.min < minValue || value.min > maxValue || value.max < minValue || value.max > maxValue)) {\n    return new Error('\"' + propName + '\" must be in between \"minValue\" and \"maxValue\"');\n  }\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../../../src/js/input-range/value-prop-type.js"],"names":["valuePropType","maxValue","minValue","props","value"],"mappings":";;;;;kBAOwBA,a;;AAPxB,IAAA,MAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAEA;;;;;;;AAKe,SAAA,aAAA,CAAA,KAAA,EAAA,QAAA,EAAwC;AAAA,MAC7CC,QAD6C,GACtBE,KADsB,CAAA,QAAA;AAAA,MACnCD,QADmC,GACtBC,KADsB,CAAA,QAAA;AAErD,MAAMC,KAAAA,GAAQD,KAAAA,CAAd,QAAcA,CAAd;;AAEA,MAAI,CAAC,CAAA,GAAA,MAAA,CAAA,QAAA,EAAD,KAAC,CAAD,KAAqB,CAAC,CAAA,GAAA,MAAA,CAAA,QAAA,EAAD,KAAC,CAAD,IAAoB,CAAC,CAAA,GAAA,MAAA,CAAA,QAAA,EAASC,KAAAA,CAA9B,GAAqB,CAArB,IAA4C,CAAC,CAAA,GAAA,MAAA,CAAA,QAAA,EAASA,KAAAA,CAA/E,GAAsE,CAAlE,CAAJ,EAA4F;AAC1F,WAAO,IAAA,KAAA,CAAA,MAAA,QAAA,GAAP,sCAAO,CAAP;AACD;;AAED,MAAI,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,KAAA,MAAoBA,KAAAA,GAAAA,QAAAA,IAAoBA,KAAAA,GAA5C,QAAI,CAAJ,EAA+D;AAC7D,WAAO,IAAA,KAAA,CAAA,MAAA,QAAA,GAAP,gDAAO,CAAP;AACD;;AAED,MAAI,CAAA,GAAA,MAAA,CAAA,QAAA,EAAA,KAAA,MAAoBA,KAAAA,CAAAA,GAAAA,GAAAA,QAAAA,IAAwBA,KAAAA,CAAAA,GAAAA,GAAxBA,QAAAA,IAAgDA,KAAAA,CAAAA,GAAAA,GAAhDA,QAAAA,IAAwEA,KAAAA,CAAAA,GAAAA,GAAhG,QAAI,CAAJ,EAAuH;AACrH,WAAO,IAAA,KAAA,CAAA,MAAA,QAAA,GAAP,gDAAO,CAAP;AACD;AACF","sourcesContent":["import { isNumber, isObject } from '../utils';\n\n/**\n * @ignore\n * @param {Object} props\n * @return {?Error} Return Error if validation fails\n */\nexport default function valuePropType(props, propName) {\n  const { maxValue, minValue } = props;\n  const value = props[propName];\n\n  if (!isNumber(value) && (!isObject(value) || !isNumber(value.min) || !isNumber(value.max))) {\n    return new Error(`\"${propName}\" must be a number or a range object`);\n  }\n\n  if (isNumber(value) && (value < minValue || value > maxValue)) {\n    return new Error(`\"${propName}\" must be in between \"minValue\" and \"maxValue\"`);\n  }\n\n  if (isObject(value) && (value.min < minValue || value.min > maxValue || value.max < minValue || value.max > maxValue)) {\n    return new Error(`\"${propName}\" must be in between \"minValue\" and \"maxValue\"`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}