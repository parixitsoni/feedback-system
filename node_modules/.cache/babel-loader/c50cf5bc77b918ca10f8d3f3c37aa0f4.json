{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.getPercentageFromPosition = getPercentageFromPosition;\nexports.getValueFromPosition = getValueFromPosition;\nexports.getValueFromProps = getValueFromProps;\nexports.getPercentageFromValue = getPercentageFromValue;\nexports.getPercentagesFromValues = getPercentagesFromValues;\nexports.getPositionFromValue = getPositionFromValue;\nexports.getPositionsFromValues = getPositionsFromValues;\nexports.getPositionFromEvent = getPositionFromEvent;\nexports.getStepValueFromValue = getStepValueFromValue;\n\nvar _utils = require('../utils');\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\n\n\nfunction getPercentageFromPosition(position, clientRect) {\n  var length = clientRect.width;\n  var sizePerc = position.x / length;\n  return sizePerc || 0;\n}\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\n\n\nfunction getValueFromPosition(position, minValue, maxValue, clientRect) {\n  var sizePerc = getPercentageFromPosition(position, clientRect);\n  var valueDiff = maxValue - minValue;\n  return minValue + valueDiff * sizePerc;\n}\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\n\n\nfunction getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return _extends({}, props.value);\n  }\n\n  return {\n    min: props.minValue,\n    max: props.value\n  };\n}\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\n\n\nfunction getPercentageFromValue(value, minValue, maxValue) {\n  var validValue = (0, _utils.clamp)(value, minValue, maxValue);\n  var valueDiff = maxValue - minValue;\n  var valuePerc = (validValue - minValue) / valueDiff;\n  return valuePerc || 0;\n}\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\n\n\nfunction getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue)\n  };\n}\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\n\n\nfunction getPositionFromValue(value, minValue, maxValue, clientRect) {\n  var length = clientRect.width;\n  var valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  var positionValue = valuePerc * length;\n  return {\n    x: positionValue,\n    y: 0\n  };\n}\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\n\n\nfunction getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect)\n  };\n}\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\n\n\nfunction getPositionFromEvent(event, clientRect) {\n  var length = clientRect.width;\n\n  var _ref = event.touches ? event.touches[0] : event,\n      clientX = _ref.clientX;\n\n  return {\n    x: (0, _utils.clamp)(clientX - clientRect.left, 0, length),\n    y: 0\n  };\n}\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\n\n\nfunction getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}","map":{"version":3,"sources":["../../../src/js/input-range/value-transformer.js"],"names":["getPercentageFromPosition","length","clientRect","sizePerc","position","getValueFromPosition","valueDiff","maxValue","minValue","getValueFromProps","props","min","max","value","getPercentageFromValue","validValue","valuePerc","getPercentagesFromValues","values","getPositionFromValue","positionValue","x","y","getPositionsFromValues","getPositionFromEvent","clientX","event","getStepValueFromValue","Math"],"mappings":"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","sourcesContent":["import { clamp } from '../utils';\n\n/**\n * Convert a point into a percentage value\n * @ignore\n * @param {Point} position\n * @param {ClientRect} clientRect\n * @return {number} Percentage value\n */\nexport function getPercentageFromPosition(position, clientRect) {\n  const length = clientRect.width;\n  const sizePerc = position.x / length;\n\n  return sizePerc || 0;\n}\n\n/**\n * Convert a point into a model value\n * @ignore\n * @param {Point} position\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {number}\n */\nexport function getValueFromPosition(position, minValue, maxValue, clientRect) {\n  const sizePerc = getPercentageFromPosition(position, clientRect);\n  const valueDiff = maxValue - minValue;\n\n  return minValue + (valueDiff * sizePerc);\n}\n\n/**\n * Convert props into a range value\n * @ignore\n * @param {Object} props\n * @param {boolean} isMultiValue\n * @return {Range}\n */\nexport function getValueFromProps(props, isMultiValue) {\n  if (isMultiValue) {\n    return { ...props.value };\n  }\n\n  return {\n    min: props.minValue,\n    max: props.value,\n  };\n}\n\n/**\n * Convert a model value into a percentage value\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @return {number}\n */\nexport function getPercentageFromValue(value, minValue, maxValue) {\n  const validValue = clamp(value, minValue, maxValue);\n  const valueDiff = maxValue - minValue;\n  const valuePerc = (validValue - minValue) / valueDiff;\n\n  return valuePerc || 0;\n}\n\n/**\n * Convert model values into percentage values\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @return {Range}\n */\nexport function getPercentagesFromValues(values, minValue, maxValue) {\n  return {\n    min: getPercentageFromValue(values.min, minValue, maxValue),\n    max: getPercentageFromValue(values.max, minValue, maxValue),\n  };\n}\n\n/**\n * Convert a value into a point\n * @ignore\n * @param {number} value\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Point} Position\n */\nexport function getPositionFromValue(value, minValue, maxValue, clientRect) {\n  const length = clientRect.width;\n  const valuePerc = getPercentageFromValue(value, minValue, maxValue);\n  const positionValue = valuePerc * length;\n\n  return {\n    x: positionValue,\n    y: 0,\n  };\n}\n\n/**\n * Convert a range of values into points\n * @ignore\n * @param {Range} values\n * @param {number} minValue\n * @param {number} maxValue\n * @param {ClientRect} clientRect\n * @return {Range}\n */\nexport function getPositionsFromValues(values, minValue, maxValue, clientRect) {\n  return {\n    min: getPositionFromValue(values.min, minValue, maxValue, clientRect),\n    max: getPositionFromValue(values.max, minValue, maxValue, clientRect),\n  };\n}\n\n/**\n * Convert an event into a point\n * @ignore\n * @param {Event} event\n * @param {ClientRect} clientRect\n * @return {Point}\n */\nexport function getPositionFromEvent(event, clientRect) {\n  const length = clientRect.width;\n  const { clientX } = event.touches ? event.touches[0] : event;\n\n  return {\n    x: clamp(clientX - clientRect.left, 0, length),\n    y: 0,\n  };\n}\n\n/**\n * Convert a value into a step value\n * @ignore\n * @param {number} value\n * @param {number} valuePerStep\n * @return {number}\n */\nexport function getStepValueFromValue(value, valuePerStep) {\n  return Math.round(value / valuePerStep) * valuePerStep;\n}\n"]},"metadata":{},"sourceType":"script"}