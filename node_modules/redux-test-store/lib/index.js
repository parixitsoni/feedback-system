'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = testStore;

var _redux = require('redux');

var _reduxThunk = require('redux-thunk');

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _once = require('lodash/once');

var _once2 = _interopRequireDefault(_once);

var _every = require('lodash/every');

var _every2 = _interopRequireDefault(_every);

var _cloneDeep = require('lodash/cloneDeep');

var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

var _identity = require('lodash/identity');

var _identity2 = _interopRequireDefault(_identity);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getActions(action) {
  // Check if batch action
  if (action && action.actions) {
    return action.actions;
  }

  return action;
}

function deepCloneStrategy(store) {
  var actions = [];

  function testMiddleware(_ref) {
    var dispatch = _ref.dispatch;
    var getState = _ref.getState;

    return function (next) {
      return function (action) {
        if (typeof action !== 'function') {
          actions.push(action);
        }

        next(action);
      };
    };
  }

  var clonedStore = (0, _cloneDeep2.default)(store);

  var newStore = (0, _redux.applyMiddleware)(_reduxThunk2.default, testMiddleware)(function () {
    return clonedStore;
  })();

  newStore.testStoreActions = actions;

  return newStore;
}

function testStore(store) {
  var callback = arguments.length <= 1 || arguments[1] === undefined ? _identity2.default : arguments[1];
  var cloneStore = arguments.length <= 2 || arguments[2] === undefined ? deepCloneStrategy : arguments[2];
  var fetchActions = arguments.length <= 3 || arguments[3] === undefined ? function (store) {
    return store.testStoreActions;
  } : arguments[3];

  var finalCallback = (0, _once2.default)(callback);

  var newStore = cloneStore(store);

  newStore.queuedActions = [];

  newStore.when = function (actionType) {
    var assertion = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

    newStore.queuedActions.push({
      type: actionType,
      tested: false,
      assertion: assertion
    });

    return newStore;
  };

  newStore.subscribe(function () {
    var state = newStore.getState();
    var actions = fetchActions(newStore);
    var lastActions = [].concat(getActions(actions[actions.length - 1]));

    lastActions = [].concat(lastActions);

    lastActions.forEach(function (lastAction) {
      newStore.queuedActions.forEach(function (action, index) {
        if (action.type !== lastAction.type || action.tested) return action;

        var assertion = action.assertion;

        var result = assertion(state, lastAction, actions);

        newStore.queuedActions[index].tested = true;
      });
    });

    if ((0, _every2.default)(newStore.queuedActions, { tested: true })) {
      return finalCallback();
    }
  });

  return newStore;
}